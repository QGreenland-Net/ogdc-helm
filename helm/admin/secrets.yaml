######################################################################################
#     D O   N O T   C H E C K   C R E D E N T I A L S   I N T O   G I T H U B ! ! !
######################################################################################
#
# Edit this file to add your passwords, then install them in your cluster by one of the
# following methods. Assuming your release name is "my-release": (NOTE THE RELEASE NAME MUST
# MATCH THE ONE YOU USE WITH HELM!)
#
# 1. Define the release name on the command line:
#     $  RELEASE_NAME=my-release  envsubst < secrets.yaml | kubectl apply -n <mynamespace> -f -
#
#     # if this results in "command not found: envsubst", you can install envsubst (e.g. on Mac OS:
#        $  brew install gettext && brew link --force gettext
#
# 2. Alternatively, you can simply replace "${RELEASE_NAME}" in the file below (be sure to retain
#    the "-secrets" part), and do:     $  kubectl apply -n <mynamespace> -f secrets.yaml)
#
apiVersion: v1
kind: Secret
metadata:
  #######################################################################
  ##  IMPORTANT:
  ##  EDIT THIS TO SUBSTITUTE YOUR RELEASE NAME
  #######################################################################
  name: ${RELEASE_NAME}-secrets

type: Opaque

## @param stringData write-only, non-binary secret data (eg credentials) in string form.
## stringData allows specifying write-only, non-binary secret data (eg MinIO credentials) in
## string form. The stringData field is never output when reading from the API.
##
## # # #    NEVER CHECK SECRETS INTO GITHUB!   # # #
##
stringData:
  # Change these values to your desired passwords
  # Keys must match the expected format: rootUser and rootPassword

  ## @param rootUser MinIO admin user name
  ## Default: your-value-here
  rootUser: your-value-here

  ## @param rootPassword MinIO admin password
  ## Default: your-value-here
  rootPassword: your-value-here

## @param data
## Contains the secret data. The serialized form of the secret data is a base64 encoded string,
## representing the arbitrary (typically non-string) data value below.
data: {}