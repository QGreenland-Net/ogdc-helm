# Default values for OGDC
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# env: The deployment environment. Allowed values: dev, stage, prod.
env: dev

# OgdcNamespace: The namespace where OGDC is deployed
OgdcNamespace: qgnet

global:
  ## Storage class settings for each environment.
  ## @param dev.defaultStorageClass StorageClass for dev environment (default: "")
  ## @param stage.defaultStorageClass StorageClass for stage environment (default: "csi-cephfs-sc-ephemeral")
  ## @param prod.defaultStorageClass StorageClass for prod environment (default: "csi-cephfs-sc")
  dev:
    defaultStorageClass : ""
  stage:
    defaultStorageClass : "csi-cephfs-sc-ephemeral"
  prod:
    defaultStorageClass : "csi-cephfs-sc"

argo-workflows:
  ## Custom resource configuration
  crds:
    # -- Install and upgrade CRDs
    install: true
    # -- Keep CRDs on chart uninstall
    keep: false
    # -- Annotations to be added to all CRDs
    annotations: {}

  # Disable cluster-level roles and resources entirely
  createAggregateRoles: true

  # Workflow service account configuration
  workflow:
    serviceAccount:
      create: true
      name: "argo-workflow"
      automountServiceAccountToken: true
    rbac:
      create: true

  # Controller configuration
  controller:
    resources:
      requests:
        memory: "2Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "1000m"

    # Configure metrics
    metricsConfig:
      enabled: false

  server:
    enabled: true

    # Set resource requirements
    resources:
      requests:
        memory: "1Gi"
        cpu: "200m"
      limits:
        memory: "2Gi"
        cpu: "500m"
    
    # Authentication mode
    authModes:
      - server
    
    service:
      type: ClusterIP
      port: 2746
      
  # Executor configuration  
  executor:
    resources:
      requests:
        memory: "1Gi"
        cpu: "200m"
      limits:
        memory: "4Gi"
        cpu: "1000m"

  # Artifact repository configuration
  artifactRepository:
    s3:
      bucket: argo-workflows
      endpoint: "{{ .Release.Name }}-minio:9000"
      # For now using direct credentials (can be improved with secrets later)
      accessKeySecret:
        name: "{{ .Release.Name }}-minio"
        key: rootUser
      secretKeySecret:
        name: "{{ .Release.Name }}-minio"
        key: rootPassword
      insecure: true


# MinIO configuration
minio:
  # Set to standalone mode for simplicity 
  mode: standalone
  replicas: 1
  
  # Set credentials
  rootUser: "admin"
  rootPassword: "admin123"

  # Create buckets needed for Argo Workflows
  buckets:
    - name: argo-workflows
      policy: none
      purge: false
  
  # Persistence configuration
  persistence:
    enabled: true
    existingClaim: "minio-pvc"
    size: 10Gi

    dev:
      storageClassName: "local-path"
      accessModes:
        - ReadWriteOnce

    stage:
      storageClassName: "csi-cephfs-sc-ephemeral"
      accessModes:
        - ReadWriteOnce

    prod:
      storageClassName: "csi-cephfs-sc"
      accessModes:
        - ReadWriteOnce

  # Resource configuration
  resources:
    requests:
      memory: "1Gi"
      cpu: "200m"
    limits:
      memory: "2Gi"
      cpu: "500m"
