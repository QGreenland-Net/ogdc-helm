# Default values for OGDC
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# env: The deployment environment. Allowed values: dev, stage, prod.
env: dev

global:
  ## @param rbac.singleNamespace Restrict Argo to only deploy into a single namespace by apply Roles and RoleBindings instead of the Cluster equivalents, and start argo-cli with the --namespaced flag. Use it in clusters with strict access policy.
  ##
  rbac:
    singleNamespace: true

  ## Storage class settings for each environment.
  ## @param dev.defaultStorageClass StorageClass for dev environment (default: "")
  ## @param stage.defaultStorageClass StorageClass for stage environment (default: "csi-cephfs-sc-ephemeral")
  ## @param prod.defaultStorageClass StorageClass for prod environment (default: "csi-cephfs-sc")
  dev:
    defaultStorageClass : ""
  stage:
    defaultStorageClass : "csi-cephfs-sc-ephemeral"
  prod:
    defaultStorageClass : "csi-cephfs-sc"

argo-workflows:
  # Copyright Broadcom, Inc. All Rights Reserved.
  # SPDX-License-Identifier: APACHE-2.0

  ## @param clusterDomain Kubernetes cluster domain name
  ##
  clusterDomain: cluster.local

  rbac:
    singleNamespace: true

  ## @param createAggregateRoles Create Aggregated cluster roles
  ##
  createAggregateRoles: true

  ## @section Argo Workflows Server configuration parameters
  ##

  ## Argo Workflows server (based on the CLI) image
  ##
  server:
    
    ## server resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param server.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if server.resources is set (server.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "medium"
    
    auth:
      ## @param server.auth.mode Set authentication mode. Either `server`, `client` or `sso`.
      ##
      # https://argo-workflows.readthedocs.io/en/latest/argo-server-auth-mode/
      # `server`: In hosted mode, use the Server's Service Account. In local
      # mode, use your local kube config.
      mode: server
    service:
      ports:
        http: 2746
      
  ## @section Argo Workflows Controller configuration parameters
  ##

  ## Argo Workflows Controller
  ##
  controller:
    resourcesPreset: "large"
    
    workflowNamespaces:
      - default
      - argo

    ##
    ## @param controller.persistence.archive.enabled Save completed workflows to an SQL database.
    persistence:
      archive:
        enabled: true

    config: |
      artifactRepository:
        s3:
          bucket: argo-workflows
          endpoint: {{ .Release.Name }}-minio:9000
          accessKeySecret:
            name: {{ .Release.Name }}-minio-credentials
            key: root-user
          secretKeySecret:
            name: {{ .Release.Name }}-minio-credentials
            key: root-password
          insecure: true

      {{- if (include "argo-workflows.controller.persistence.enabled" .) }}
      persistence:
        connectionPool:
          maxIdleConns: 100
          maxOpenConns: 0
        nodeStatusOffLoad: false
        archive: true
        postgresql:
          host: {{ .Release.Name }}-postgresql
          port: 5432
          database: {{ .Release.Name }}
          tableName: argo_workflows
          ## the database secrets must be in the same namespace of the controller
          ##
          userNameSecret:
            name: {{ .Release.Name }}-postgresql-credentials
            key: username
          passwordSecret:
            name: {{ .Release.Name }}-postgresql-credentials
            key: password
      {{- end }}

  ## @section Executor configuration section
  ##
  executor:
    ## Init container's resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param executor.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if executor.resources is set (executor.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"

  ## @section Workflows configuration
  ##
  workflows:
    enabled: true
    serviceAccount:
      create: true
      name: "argo-workflow"
      automountServiceAccountToken: true
    rbac:
      create: true

  
  postgresql:
    enabled: true
    auth:
      database: "{{ .Release.Name }}"
      existingSecret: "{{ .Release.Name }}-postgresql-credentials"
    primary:
      persistence:
        existingClaim: "{{ .Release.Name }}-postgresql-pvc"
        size: 10Gi
        dev:
          storageClassName: "local-path"
          accessModes:
            - ReadWriteOnce
        stage:
          storageClassName: "csi-cephfs-sc"
          accessModes:
            - ReadWriteOnce
        prod:
          storageClassName: "csi-cephfs-sc"
          accessModes:
            - ReadWriteOnce


minio:
  auth:
    existingSecret: "{{ .Release.Name }}-minio-credentials"
  ## @param defaultBuckets Comma, semi-colon or space separated list of buckets to create at initialization (only in standalone mode)
  ## e.g:
  ## defaultBuckets: "my-bucket, my-second-bucket"
  ##
  defaultBuckets: "argo-workflows"

  image:
    debug: true

  persistence:
    existingClaim: "{{ .Release.Name }}-minio-pvc"
    size: 10Gi

    dev:
      storageClassName: "local-path"
      accessModes:
        - ReadWriteOnce

    stage:
      storageClassName: "csi-cephfs-sc-ephemeral"
      accessModes:
        - ReadWriteOnce

    prod:
      storageClassName: "csi-cephfs-sc"
      accessModes:
        - ReadWriteOnce
